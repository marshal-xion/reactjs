import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import App from './App';

// Mock setTimeout to control timing in tests
jest.useFakeTimers();

describe('App Component', () => {
  // Reset timers after each test
  afterEach(() => {
    jest.clearAllTimers();
  });

  test('renders initial UI correctly with default props', () => {
    render(<App />);
    expect(screen.getByRole('heading', { name: /click counter/i })).toBeInTheDocument();
    expect(screen.getByText('Current count: 0')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /click to increment count/i })).toHaveTextContent('Click me');
    expect(screen.getByRole('button', { name: /reset counter/i })).toBeDisabled();
  });

  test('renders with custom props', () => {
    render(<App initialCount={5} buttonText="Increment" />);
    expect(screen.getByText('Current count: 5')).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /click to increment count/i })).toHaveTextContent('Increment');
    expect(screen.getByRole('button', { name: /reset counter/i })).not.toBeDisabled();
  });

  test('increments count and shows feedback message on click', async () => {
    render(<App />);
    const clickButton = screen.getByRole('button', { name: /click to increment count/i });

    fireEvent.click(clickButton);
    expect(screen.getByText('Current count: 1')).toBeInTheDocument();
    expect(screen.getByRole('status')).toHaveTextContent('Button clicked 1 time!');

    // Fast-forward 2 seconds to check message disappearance
    jest.advanceTimersByTime(2000);
    await waitFor(() => {
      expect(screen.queryByRole('status')).not.toBeInTheDocument();
    });
  });

  test('handles multiple clicks correctly', async () => {
    render(<App />);
    const clickButton = screen.getByRole('button', { name: /click to increment count/i });

    fireEvent.click(clickButton);
    fireEvent.click(clickButton);
    expect(screen.getByText('Current count: 2')).toBeInTheDocument();
    expect(screen.getByRole('status')).toHaveTextContent('Button clicked 2 times!');

    jest.advanceTimersByTime(2000);
    await waitFor(() => {
      expect(screen.queryByRole('status')).not.toBeInTheDocument();
    });
  });

  test('resets count and shows reset message', async () => {
    render(<App initialCount={3} />);
    const resetButton = screen.getByRole('button', { name: /reset counter/i });

    await userEvent.click(resetButton);
    expect(screen.getByText('Current count: 3')).toBeInTheDocument();
    expect(screen.getByRole('status')).toHaveTextContent('Counter reset!');

    jest.advanceTimersByTime(2000);
    await waitFor(() => {
      expect(screen.queryByRole('status')).not.toBeInTheDocument();
    });
  });

  test('reset button is disabled when count equals initialCount', () => {
    render(<App initialCount={0} />);
    const resetButton = screen.getByRole('button', { name: /reset counter/i });
    expect(resetButton).toBeDisabled();

    // Click to enable reset button
    const clickButton = screen.getByRole('button', { name: /click to increment count/i });
    fireEvent.click(clickButton);
    expect(resetButton).not.toBeDisabled();
  });

  test('ARIA labels update dynamically with count', () => {
    render(<App />);
    const clickButton = screen.getByRole('button', { name: /click to increment count, current count is 0/i });
    fireEvent.click(clickButton);
    expect(
      screen.getByRole('button', { name: /click to increment count, current count is 1/i })
    ).toBeInTheDocument();
  });
});